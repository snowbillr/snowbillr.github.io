{"mappings":"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","sources":["<anon>","scripts/index.js","scripts/background/point-grid-background.js","scripts/background/point-grid.js","scripts/background/point.js","scripts/background/point-swap-animation.js","scripts/console-message.js"],"sourcesContent":["class $61010cb15f95c70e$export$baf26146a414f24a {\n    constructor(gridX, gridY){\n        this.size = 3;\n        this.gridX = gridX;\n        this.gridY = gridY;\n        this.displayX = 0;\n        this.displayY = 0;\n        this.visible = true;\n    }\n    clone() {\n        const newPoint = new $61010cb15f95c70e$export$baf26146a414f24a(this.gridX, this.gridY);\n        newPoint.displayX = this.displayX;\n        newPoint.displayY = this.displayY;\n        return newPoint;\n    }\n    render(ctx) {\n        if (this.visible) {\n            ctx.fillStyle = \"#ccc\";\n            ctx.fillRect(this.displayX, this.displayY, this.size, this.size);\n        }\n    }\n}\n\n\nclass $59ecd5dd974a5d4c$export$2bbdffc3094bc005 {\n    constructor(pointDistance, displayWidth, displayHeight){\n        this.pointDistance = pointDistance;\n        this.resize(displayWidth, displayHeight);\n    }\n    resize(displayWidth, displayHeight) {\n        this.points = [];\n        this.horizontalPointCount = Math.ceil(displayWidth / this.pointDistance);\n        this.verticalPointCount = Math.ceil(displayHeight / this.pointDistance);\n        this.xPadding = (displayWidth - (this.horizontalPointCount - 1) * this.pointDistance) / 2;\n        this.yPadding = (displayHeight - (this.verticalPointCount - 1) * this.pointDistance) / 2;\n        for(let x = 0; x < this.horizontalPointCount; x++)for(let y = 0; y < this.verticalPointCount; y++)this.points.push(new (0, $61010cb15f95c70e$export$baf26146a414f24a)(x, y));\n    }\n    update() {\n        this.points.forEach((point)=>{\n            point.displayX = point.gridX * this.pointDistance + this.xPadding;\n            point.displayY = point.gridY * this.pointDistance + this.yPadding;\n        });\n    }\n    render(ctx) {\n        this.points.forEach((point)=>{\n            point.render(ctx);\n        });\n    }\n    selectVisibleAdjacentPoints() {\n        const firstPoint = this.shuffleArray(this.points.filter((point)=>point.visible))[0];\n        if (firstPoint == null) return [\n            null,\n            null\n        ];\n        const secondPoint = this.shuffleArray(this.selectVisibleCardinalPoints(firstPoint))[0];\n        return [\n            firstPoint,\n            secondPoint\n        ];\n    }\n    selectVisibleCardinalPoints({ gridX: gridX, gridY: gridY }) {\n        return [\n            this.findPoint(gridX + 1, gridY),\n            this.findPoint(gridX - 1, gridY),\n            this.findPoint(gridX, gridY + 1),\n            this.findPoint(gridX, gridY - 1)\n        ].filter((point)=>point != null).filter((point)=>point.visible);\n    }\n    findPoint(gridX, gridY) {\n        return this.points.find((point)=>point.gridX === gridX && point.gridY === gridY);\n    }\n    // taken from https://stackoverflow.com/a/6274381/1950372\n    shuffleArray(a) {\n        for(let i = a.length - 1; i > 0; i--){\n            const j = Math.floor(Math.random() * (i + 1));\n            [a[i], a[j]] = [\n                a[j],\n                a[i]\n            ];\n        }\n        return a;\n    }\n}\n\n\nclass $3f0e2282ff1587bd$export$90de0cfb0ccee174 {\n    constructor(firstPoint, secondPoint, callback){\n        this.frameDuration = 60; // in frames\n        this.frame = 0;\n        this.isRunning = true;\n        this.callback = callback;\n        this.callbackCalled = false;\n        this.firstPoint = firstPoint.clone();\n        this.secondPoint = secondPoint.clone();\n        this.originalDisplayCoords = {\n            firstPoint: {\n                displayX: firstPoint.displayX,\n                displayY: firstPoint.displayY\n            },\n            secondPoint: {\n                displayX: secondPoint.displayX,\n                displayY: secondPoint.displayY\n            }\n        };\n        this.xDistance = firstPoint.displayX - secondPoint.displayX;\n        this.yDistance = firstPoint.displayY - secondPoint.displayY;\n    }\n    ease(t, b, c, d) {\n        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\n    }\n    update() {\n        this.frame += 1;\n        if (this.frame > this.frameDuration) {\n            this.isRunning = false;\n            if (!this.callbackCalled) {\n                this.callback(this);\n                this.callbackCalled = true;\n            }\n        } else {\n            this.firstPoint.displayX = this.ease(this.frame, this.originalDisplayCoords.firstPoint.displayX, -this.xDistance, this.frameDuration);\n            this.firstPoint.displayY = this.ease(this.frame, this.originalDisplayCoords.firstPoint.displayY, -this.yDistance, this.frameDuration);\n            this.secondPoint.displayX = this.ease(this.frame, this.originalDisplayCoords.secondPoint.displayX, this.xDistance, this.frameDuration);\n            this.secondPoint.displayY = this.ease(this.frame, this.originalDisplayCoords.secondPoint.displayY, this.yDistance, this.frameDuration);\n        }\n    }\n    render(ctx) {\n        if (this.isRunning) {\n            this.firstPoint.render(ctx);\n            this.secondPoint.render(ctx);\n        }\n    }\n}\n\n\nclass $1dce007107cac56e$export$a9157d44f8740852 {\n    constructor(){\n        this.backgroundCanvas = document.querySelector(\"#background-canvas\");\n        this.ctx = this.backgroundCanvas.getContext(\"2d\");\n        this.pointGrid = new (0, $59ecd5dd974a5d4c$export$2bbdffc3094bc005)(100, this.ctx.canvas.clientWidth, this.ctx.canvas.clientHeight);\n        this.pointSwapAnimations = [];\n    }\n    start() {\n        this.addResizeListener();\n        this.resize();\n        this.startSpawnLoop();\n        requestAnimationFrame(()=>this.mainLoop());\n    }\n    addResizeListener() {\n        window.addEventListener(\"resize\", this.resize);\n    }\n    resize() {\n        const displayWidth = window.innerWidth;\n        const displayHeight = window.innerHeight;\n        this.backgroundCanvas.width = displayWidth;\n        this.backgroundCanvas.height = displayHeight;\n        this.pointGrid.resize(displayWidth, displayHeight);\n    }\n    startSpawnLoop() {\n        setInterval(()=>{\n            if (this.pointSwapAnimations.length >= 5) return;\n            const [firstPoint, secondPoint] = this.pointGrid.selectVisibleAdjacentPoints();\n            if (firstPoint == null || secondPoint == null) return;\n            firstPoint.visible = false;\n            secondPoint.visible = false;\n            this.pointSwapAnimations.push(new (0, $3f0e2282ff1587bd$export$90de0cfb0ccee174)(firstPoint, secondPoint, (animation)=>{\n                firstPoint.visible = true;\n                secondPoint.visible = true;\n                this.pointSwapAnimations.splice(this.pointSwapAnimations.indexOf(animation), 1);\n            }));\n        }, 500);\n    }\n    mainLoop() {\n        this.update();\n        this.render();\n        requestAnimationFrame(()=>this.mainLoop());\n    }\n    update() {\n        this.pointGrid.update();\n        this.pointSwapAnimations.forEach((pointSwapAnimation)=>pointSwapAnimation.update());\n    }\n    render() {\n        this.clear();\n        this.pointGrid.render(this.ctx);\n        this.pointSwapAnimations.forEach((pointSwapAnimation)=>pointSwapAnimation.render(this.ctx));\n    }\n    clear() {\n        this.ctx.fillStyle = \"#fff\";\n        this.ctx.fillRect(0, 0, this.ctx.canvas.clientWidth, this.ctx.canvas.clientHeight);\n    }\n}\n\n\nclass $925fc86b1b994db2$export$fbfa980782cb979a {\n    print() {\n        console.log(`\nThanks for checking out my website!\n\nYou can contact me at billnreed@gmail.com if you'd like to get in touch.\n    `);\n    }\n}\n\n\nif (document.readyState === \"complete\" || document.readyState === \"interactive\") $2d8bd5fc659707cd$var$onReady();\nelse document.addEventListener(\"DOMContentLoaded\", $2d8bd5fc659707cd$var$onReady);\nfunction $2d8bd5fc659707cd$var$onReady() {\n    const pointGridBackground = new (0, $1dce007107cac56e$export$a9157d44f8740852)();\n    pointGridBackground.start();\n    const consoleMessage = new (0, $925fc86b1b994db2$export$fbfa980782cb979a)();\n    consoleMessage.print();\n}\n\n\n//# sourceMappingURL=index.620cad5f.js.map\n","import { PointGridBackground } from './background/point-grid-background';\nimport { ConsoleMessage } from './console-message';\n\nif (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n  onReady();\n} else {\n  document.addEventListener(\"DOMContentLoaded\", onReady);\n}\n\nfunction onReady() {\n  const pointGridBackground = new PointGridBackground();\n  pointGridBackground.start();\n\n  const consoleMessage = new ConsoleMessage();\n  consoleMessage.print();\n}","import { PointGrid } from './point-grid';\nimport { PointSwapAnimation } from './point-swap-animation';\n\nexport class PointGridBackground {\n  constructor() {\n    this.backgroundCanvas = document.querySelector('#background-canvas');\n    this.ctx = this.backgroundCanvas.getContext('2d');\n\n    this.pointGrid = new PointGrid(100, this.ctx.canvas.clientWidth, this.ctx.canvas.clientHeight);\n    this.pointSwapAnimations = [];\n  }\n\n  start() {\n    this.addResizeListener();\n    this.resize();\n\n    this.startSpawnLoop();\n\n    requestAnimationFrame(() => this.mainLoop());\n  }\n\n  addResizeListener() {\n    window.addEventListener('resize', this.resize);\n  }\n\n  resize() {\n    const displayWidth = window.innerWidth;\n    const displayHeight = window.innerHeight;\n\n    this.backgroundCanvas.width = displayWidth;\n    this.backgroundCanvas.height = displayHeight;\n\n    this.pointGrid.resize(displayWidth, displayHeight);\n  }\n\n  startSpawnLoop() {\n    setInterval(() => {\n      if (this.pointSwapAnimations.length >= 5) return;\n\n      const [firstPoint, secondPoint] = this.pointGrid.selectVisibleAdjacentPoints();\n\n      if (firstPoint == null || secondPoint == null) return;\n\n      firstPoint.visible = false;\n      secondPoint.visible = false;\n\n      this.pointSwapAnimations.push(new PointSwapAnimation(firstPoint, secondPoint, animation => {\n        firstPoint.visible = true;\n        secondPoint.visible = true;\n\n        this.pointSwapAnimations.splice(this.pointSwapAnimations.indexOf(animation), 1);\n      }));\n    }, 500)\n  }\n\n  mainLoop() {\n    this.update();\n    this.render();\n    requestAnimationFrame(() => this.mainLoop());\n  }\n\n  update() {\n    this.pointGrid.update();\n    this.pointSwapAnimations.forEach(pointSwapAnimation => pointSwapAnimation.update());\n  }\n\n  render() {\n    this.clear();\n    this.pointGrid.render(this.ctx);\n    this.pointSwapAnimations.forEach(pointSwapAnimation => pointSwapAnimation.render(this.ctx));\n  }\n\n  clear() {\n    this.ctx.fillStyle = '#fff';\n    this.ctx.fillRect(0, 0, this.ctx.canvas.clientWidth, this.ctx.canvas.clientHeight);\n  }\n}\n","import { Point } from './point';\n\nexport class PointGrid {\n  constructor(pointDistance, displayWidth, displayHeight) {\n    this.pointDistance = pointDistance;\n    this.resize(displayWidth, displayHeight);\n  }\n\n  resize(displayWidth, displayHeight) {\n    this.points = [];\n\n    this.horizontalPointCount = Math.ceil(displayWidth / this.pointDistance);\n    this.verticalPointCount = Math.ceil(displayHeight / this.pointDistance);\n\n    this.xPadding = (displayWidth - (this.horizontalPointCount - 1) * this.pointDistance) / 2;\n    this.yPadding = (displayHeight - (this.verticalPointCount - 1) * this.pointDistance) / 2;\n\n    for (let x = 0; x < this.horizontalPointCount; x++) {\n      for (let y = 0; y < this.verticalPointCount; y++) {\n        this.points.push(new Point(x, y));\n      }\n    }\n  }\n\n  update() {\n    this.points.forEach(point => {\n      point.displayX = point.gridX * this.pointDistance + this.xPadding;\n      point.displayY = point.gridY * this.pointDistance + this.yPadding;\n    });\n  }\n\n  render(ctx) {\n    this.points.forEach(point => {\n      point.render(ctx);\n    });\n  }\n\n  selectVisibleAdjacentPoints() {\n    const firstPoint = this.shuffleArray(this.points.filter(point => point.visible))[0];\n    if (firstPoint == null) {\n      return [null, null];\n    }\n\n    const secondPoint = this.shuffleArray(this.selectVisibleCardinalPoints(firstPoint))[0];\n\n    return [firstPoint, secondPoint];\n  }\n\n  selectVisibleCardinalPoints({ gridX, gridY }) {\n    return [\n      this.findPoint(gridX + 1, gridY),\n      this.findPoint(gridX - 1, gridY),\n      this.findPoint(gridX, gridY + 1),\n      this.findPoint(gridX, gridY - 1),\n    ].filter(point => point != null)\n     .filter(point => point.visible);\n  }\n\n  findPoint(gridX, gridY) {\n    return this.points.find(point => point.gridX === gridX && point.gridY === gridY);\n  }\n\n  // taken from https://stackoverflow.com/a/6274381/1950372\n  shuffleArray(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n}\n","export class Point {\n  constructor(gridX, gridY) {\n    this.size = 3;\n\n    this.gridX = gridX;\n    this.gridY = gridY;\n\n    this.displayX = 0;\n    this.displayY = 0;\n\n    this.visible = true;\n  }\n\n  clone() {\n    const newPoint = new Point(this.gridX, this.gridY);\n    newPoint.displayX = this.displayX;\n    newPoint.displayY = this.displayY;\n\n    return newPoint;\n  }\n\n  render(ctx) {\n    if (this.visible) {\n      ctx.fillStyle = '#ccc';\n      ctx.fillRect(this.displayX, this.displayY, this.size, this.size);\n    }\n  }\n}\n","export class PointSwapAnimation {\n  constructor(firstPoint, secondPoint, callback) {\n    this.frameDuration = 60; // in frames\n    this.frame = 0;\n    this.isRunning = true;\n\n    this.callback = callback;\n    this.callbackCalled = false;\n\n    this.firstPoint = firstPoint.clone();\n    this.secondPoint = secondPoint.clone();\n\n    this.originalDisplayCoords = {\n      firstPoint: {\n        displayX: firstPoint.displayX,\n        displayY: firstPoint.displayY,\n      },\n      secondPoint: {\n        displayX: secondPoint.displayX,\n        displayY: secondPoint.displayY,\n      }\n    };\n\n    this.xDistance = firstPoint.displayX - secondPoint.displayX;\n    this.yDistance = firstPoint.displayY - secondPoint.displayY;\n  }\n\n  ease(t, b, c, d) {\n    return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;\n  }\n\n  update() {\n    this.frame += 1;\n\n    if (this.frame > this.frameDuration) {\n      this.isRunning = false;\n\n      if (!this.callbackCalled) {\n        this.callback(this);\n        this.callbackCalled = true;\n      }\n    } else {\n      this.firstPoint.displayX = this.ease(this.frame, this.originalDisplayCoords.firstPoint.displayX, -this.xDistance, this.frameDuration);\n      this.firstPoint.displayY = this.ease(this.frame, this.originalDisplayCoords.firstPoint.displayY, -this.yDistance, this.frameDuration);\n\n      this.secondPoint.displayX = this.ease(this.frame, this.originalDisplayCoords.secondPoint.displayX, this.xDistance, this.frameDuration);\n      this.secondPoint.displayY = this.ease(this.frame, this.originalDisplayCoords.secondPoint.displayY, this.yDistance, this.frameDuration);\n    }\n  }\n\n  render(ctx) {\n    if (this.isRunning) {\n      this.firstPoint.render(ctx);\n      this.secondPoint.render(ctx);\n    }\n  }\n}\n","export class ConsoleMessage {\n  print() {\n    console.log(`\nThanks for checking out my website!\n\nYou can contact me at billnreed@gmail.com if you'd like to get in touch.\n    `);\n  }\n}\n"],"names":["$61010cb15f95c70e$export$baf26146a414f24a","constructor","gridX","gridY","size","displayX","displayY","visible","clone","newPoint","render","ctx","fillStyle","fillRect","$59ecd5dd974a5d4c$export$2bbdffc3094bc005","pointDistance","displayWidth","displayHeight","resize","points","horizontalPointCount","Math","ceil","verticalPointCount","xPadding","yPadding","x","y","push","update","forEach","point","selectVisibleAdjacentPoints","firstPoint","shuffleArray","filter","secondPoint","selectVisibleCardinalPoints","findPoint","find","a","i","length","j","floor","random","$3f0e2282ff1587bd$export$90de0cfb0ccee174","callback","frameDuration","frame","isRunning","callbackCalled","originalDisplayCoords","xDistance","yDistance","ease","t","b","c","d","cos","PI","$1dce007107cac56e$export$a9157d44f8740852","backgroundCanvas","document","querySelector","getContext","pointGrid","canvas","clientWidth","clientHeight","pointSwapAnimations","start","addResizeListener","startSpawnLoop","requestAnimationFrame","mainLoop","window","addEventListener","innerWidth","innerHeight","width","height","setInterval","animation","splice","indexOf","pointSwapAnimation","clear","$925fc86b1b994db2$export$fbfa980782cb979a","print","console","log","$2d8bd5fc659707cd$var$onReady","pointGridBackground","consoleMessage","readyState"],"version":3,"file":"index.620cad5f.js.map"}