{"version":3,"sources":["point.js","point-grid.js","point-swap-animation.js","index.js"],"names":["Point","gridX","gridY","size","displayX","displayY","visible","newPoint","ctx","fillStyle","fillRect","PointGrid","pointDistance","displayWidth","displayHeight","resize","points","horizontalPointCount","Math","ceil","verticalPointCount","xPadding","yPadding","x","y","push","forEach","point","render","firstPoint","shuffleArray","filter","selectVisibleCardinalPoints","findPoint","find","a","i","length","j","floor","random","PointSwapAnimation","secondPoint","callback","frameDuration","frame","isRunning","callbackCalled","clone","originalDisplayCoords","xDistance","yDistance","t","b","c","d","cos","PI","ease","backgroundCanvas","document","querySelector","getContext","pointGrid","canvas","clientWidth","clientHeight","pointSwapAnimations","mainLoop","update","requestAnimationFrame","pointSwapAnimation","clear","window","innerWidth","innerHeight","width","height","setInterval","selectVisibleAdjacentPoints","animation","splice","indexOf","addEventListener"],"mappings":"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","file":"snowbillr.github.io.0999a6da.map","sourceRoot":"..","sourcesContent":["export class Point {\n  constructor(gridX, gridY) {\n    this.size = 3;\n\n    this.gridX = gridX;\n    this.gridY = gridY;\n\n    this.displayX = 0;\n    this.displayY = 0;\n\n    this.visible = true;\n  }\n\n  clone() {\n    const newPoint = new Point(this.gridX, this.gridY);\n    newPoint.displayX = this.displayX;\n    newPoint.displayY = this.displayY;\n\n    return newPoint;\n  }\n\n  render(ctx) {\n    if (this.visible) {\n      ctx.fillStyle = '#ccc';\n      ctx.fillRect(this.displayX, this.displayY, this.size, this.size);\n    }\n  }\n}\n","import { Point } from './point';\n\nexport class PointGrid {\n  constructor(pointDistance, displayWidth, displayHeight) {\n    this.pointDistance = pointDistance;\n    this.resize(displayWidth, displayHeight);\n  }\n\n  resize(displayWidth, displayHeight) {\n    this.points = [];\n\n    this.horizontalPointCount = Math.ceil(displayWidth / this.pointDistance);\n    this.verticalPointCount = Math.ceil(displayHeight / this.pointDistance);\n\n    this.xPadding = (displayWidth - (this.horizontalPointCount - 1) * this.pointDistance) / 2;\n    this.yPadding = (displayHeight - (this.verticalPointCount - 1) * this.pointDistance) / 2;\n\n    for (let x = 0; x < this.horizontalPointCount; x++) {\n      for (let y = 0; y < this.verticalPointCount; y++) {\n        this.points.push(new Point(x, y));\n      }\n    }\n  }\n\n  update() {\n    this.points.forEach(point => {\n      point.displayX = point.gridX * this.pointDistance + this.xPadding;\n      point.displayY = point.gridY * this.pointDistance + this.yPadding;\n    });\n  }\n\n  render(ctx) {\n    this.points.forEach(point => {\n      point.render(ctx);\n    });\n  }\n\n  selectVisibleAdjacentPoints() {\n    const firstPoint = this.shuffleArray(this.points.filter(point => point.visible))[0];\n    if (firstPoint == null) {\n      return [null, null];\n    }\n\n    const secondPoint = this.shuffleArray(this.selectVisibleCardinalPoints(firstPoint))[0];\n\n    return [firstPoint, secondPoint];\n  }\n\n  selectVisibleCardinalPoints({ gridX, gridY }) {\n    return [\n      this.findPoint(gridX + 1, gridY),\n      this.findPoint(gridX - 1, gridY),\n      this.findPoint(gridX, gridY + 1),\n      this.findPoint(gridX, gridY - 1),\n    ].filter(point => point != null)\n     .filter(point => point.visible);\n  }\n\n  findPoint(gridX, gridY) {\n    return this.points.find(point => point.gridX === gridX && point.gridY === gridY);\n  }\n\n  // taken from https://stackoverflow.com/a/6274381/1950372\n  shuffleArray(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n}\n","export class PointSwapAnimation {\n  constructor(firstPoint, secondPoint, callback) {\n    this.frameDuration = 60; // in frames\n    this.frame = 0;\n    this.isRunning = true;\n\n    this.callback = callback;\n    this.callbackCalled = false;\n\n    this.firstPoint = firstPoint.clone();\n    this.secondPoint = secondPoint.clone();\n\n    this.originalDisplayCoords = {\n      firstPoint: {\n        displayX: firstPoint.displayX,\n        displayY: firstPoint.displayY,\n      },\n      secondPoint: {\n        displayX: secondPoint.displayX,\n        displayY: secondPoint.displayY,\n      }\n    };\n\n    this.xDistance = firstPoint.displayX - secondPoint.displayX;\n    this.yDistance = firstPoint.displayY - secondPoint.displayY;\n  }\n\n  ease(t, b, c, d) {\n    return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;\n  }\n\n  update() {\n    this.frame += 1;\n\n    if (this.frame > this.frameDuration) {\n      this.isRunning = false;\n\n      if (!this.callbackCalled) {\n        this.callback(this);\n        this.callbackCalled = true;\n      }\n    } else {\n      this.firstPoint.displayX = this.ease(this.frame, this.originalDisplayCoords.firstPoint.displayX, -this.xDistance, this.frameDuration);\n      this.firstPoint.displayY = this.ease(this.frame, this.originalDisplayCoords.firstPoint.displayY, -this.yDistance, this.frameDuration);\n\n      this.secondPoint.displayX = this.ease(this.frame, this.originalDisplayCoords.secondPoint.displayX, this.xDistance, this.frameDuration);\n      this.secondPoint.displayY = this.ease(this.frame, this.originalDisplayCoords.secondPoint.displayY, this.yDistance, this.frameDuration);\n    }\n  }\n\n  render(ctx) {\n    if (this.isRunning) {\n      this.firstPoint.render(ctx);\n      this.secondPoint.render(ctx);\n    }\n  }\n}\n","import { PointGrid } from './point-grid';\nimport { PointSwapAnimation } from './point-swap-animation';\n\nconst backgroundCanvas = document.querySelector('#background-canvas');\nconst ctx = backgroundCanvas.getContext('2d');\n\nconst pointGrid = new PointGrid(100, ctx.canvas.clientWidth, ctx.canvas.clientHeight);\nconst pointSwapAnimations = [];\n\nsetInterval(() => {\n  const [firstPoint, secondPoint] = pointGrid.selectVisibleAdjacentPoints();\n\n  if (firstPoint == null || secondPoint == null) return;\n\n  firstPoint.visible = false;\n  secondPoint.visible = false;\n\n  pointSwapAnimations.push(new PointSwapAnimation(firstPoint, secondPoint, animation => {\n    firstPoint.visible = true;\n    secondPoint.visible = true;\n\n    pointSwapAnimations.splice(pointSwapAnimations.indexOf(animation), 1);\n  }));\n}, 500)\n\nfunction mainLoop() {\n  update();\n  render();\n  requestAnimationFrame(mainLoop);\n}\n\nfunction update() {\n  pointGrid.update();\n  pointSwapAnimations.forEach(pointSwapAnimation => pointSwapAnimation.update());\n}\n\nfunction render() {\n  clear();\n  pointGrid.render(ctx);\n  pointSwapAnimations.forEach(pointSwapAnimation => pointSwapAnimation.render(ctx));\n}\n\nfunction clear() {\n  ctx.fillStyle = '#fff';\n  ctx.fillRect(0, 0, ctx.canvas.clientWidth, ctx.canvas.clientHeight);\n}\n\nwindow.addEventListener('resize', resize);\nfunction resize() {\n  const displayWidth = window.innerWidth;\n  const displayHeight = window.innerHeight;\n\n  backgroundCanvas.width = displayWidth;\n  backgroundCanvas.height = displayHeight;\n\n  pointGrid.resize(displayWidth, displayHeight);\n}\nresize();\n\nmainLoop();\n"]}